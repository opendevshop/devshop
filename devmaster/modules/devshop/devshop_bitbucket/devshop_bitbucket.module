<?php

/**
 * @file devshop_bitbucket.module
 */

//require_once 'vendor/autoload.php';

/**
 * Get a GitHub client.
 *
 * If a devshop_github_token is not found, it will attempt to use the Public API.
 *
 * @param bool $must_authenticate
 *   Set to TRUE if the client must authenticate with a token. If TRUE and token
 *   is not present, an Exception will be thrown.
 *
 * @return \Bitbucket\Client
 * @throws Exception
 */
function devshop_bitbucket_client($must_authenticate = FALSE) {
  $client = new Bitbucket\Client();
  $auth_method = variable_get('devshop_bitbucket_authentication_method', '');
  $user = variable_get('devshop_bitbucket_app_username');
  $password = variable_get('devshop_bitbucket_app_password');
  $bitbucket_token = devshop_bitbucket_token();

  // If caller requires authentication, throw exception if token is missing.
  if ($must_authenticate && empty($bitbucket_token)) {
    throw new \Exception(t('There is no Bitbucket Token set, but is required for this action.'));
  }

  // Set token in client.
  try {
    if ($auth_method == 'password') {
      $client->authenticate(
        Bitbucket\Client::AUTH_HTTP_PASSWORD,
        $user,
        $password
      );
    }
    else {
      $client->authenticate(
        Bitbucket\Client::AUTH_OAUTH_TOKEN,
        $bitbucket_token
      );
    }
    return $client;
  }
  catch (Exception $e) {
    // If error, set_message and throw the exception upstream.
    drupal_set_message(t('Error validating BitBucket token: ') . $e->getMessage(), 'error');
    throw $e;
  }
}

/**
 * Implements hook_menu().
 */
function devshop_bitbucket_menu() {
  $items = array();
//
//  $items['admin/hosting/bitbucket'] = array(
//    'title' => 'BitBucket',
//    'description' => 'DevShop BitBucket Integration Settings',
//    'page callback' => 'drupal_get_form',
//    'page arguments' => array('devshop_bitbucket_settings_form'),
//    'access arguments' => array('administer projects'),
//    'file' => 'admin.inc',
//    'file path' => drupal_get_path('module', 'devshop_bitbucket') . '/includes',
//    'type' => MENU_LOCAL_TASK,
//  );
//  $items['admin/hosting/bitbucket/add-key'] = array(
//    'title' => 'Add public key to bitbucket Account',
//    'page callback' => 'drupal_get_form',
//    'page arguments' => array('devshop_bitbucket_add_key_to_account'),
//    'access arguments' => array('administer projects'),
//    'file' => 'add-key.inc',
//    'file path' => drupal_get_path('module', 'devshop_bitbucket') . '/includes',
//    'type' => MENU_CALLBACK,
//  );
  return $items;
}

/**
 * Implements hook_form_FORM_ID_alter() for project_node_form().
 */
function devshop_bitbucket_form_project_node_form_alter(&$form, &$form_state, $form_id) {
  $node = $form['#node'];

  if ($node->project->git_provider != 'bitbucket') {
    return;
  }

  //All settings git pull in project page
  $form['project']['settings']['bitbucket'] = array(
      '#type' => 'fieldset',
      '#group' => 'project_settings',
      '#collapsible' => TRUE,
      '#collapsed' => arg(1) != $node->nid,
      '#title' => t('BitBucket Integration'),
  );

  // Pull Requests create environments?
  // $form['bitbucket']['pull_request_environments'] = array(
  $form['project']['settings']['bitbucket']['pull_request_environments'] = array(
      '#type' => 'checkbox',
      '#title' => t('Create Environments for Pull Requests'),
      '#default_value' => isset($node->project->settings->bitbucket) ? $node->project->settings->bitbucket['pull_request_environments'] : FALSE,
      '#description' => t('If using bitbucket, create a new environment when a new Pull Request is created.'),
  );

  // Delete Pull Request environments?
  // $form['bitbucket']['pull_request_environments_delete'] = array(
  $form['project']['settings']['bitbucket']['pull_request_environments_delete'] = array(
      '#type' => 'checkbox',
      '#title' => t('Delete Pull Request Environments'),
      '#default_value' => isset($node->project->settings->bitbucket) ? $node->project->settings->bitbucket['pull_request_environments_delete'] : FALSE,
      '#description' => t('When Pull Requests are closed, delete the environment.'),
  );

  // Pull Request Environment method.
  // $form['bitbucket']['pull_request_environments_method'] = array(

  $environments = array_keys($node->project->environments);
  $options = array(
    t('Install Drupal') => array(
        'devshop__bitbucket__install' => empty($node->project->install_profile)? t('Default install profile.'): $node->project->install_profile,
    ),
    t('Clone another environment') => array(),
  );

  if (empty($environments)) {
    $options[t('Clone another environment')][] = t('No environments available.');
  }
  else {
    $options[t('Clone another environment')] = array_combine($environments, $environments);
  }
  $form['project']['settings']['bitbucket']['pull_request_environments_method'] = array(
      '#type' => 'select',
      '#title' => t('Pull Request Environment Creation Method'),
      '#default_value' => isset($node->project->settings->bitbucket) ?
          $node->project->settings->bitbucket['pull_request_environments_method'] : 'devshop__bitbucket__install',
      '#description' => t('Select the method for creating the pull request environments.'),
      '#options' => $options,
  );
}

/**
 * BitBucket API key form.
 * @return array()
 */
function devshop_bitbucket_form_devshop_projects_settings_form_alter(&$form, &$form_state, $form_id) {

  $token = devshop_bitbucket_token();
  $client = devshop_bitbucket_client();

  try {
    $repos = $client->repositories()->list(array('role' => 'member'));
    $repo = current($repos['values']);
    $repo_count = count($repos['values']);
    $repo_link = l($repo['full_name'], $repo['links']['html']['href'], array(
      'attributes' => array(
        'target' => '_blank')));

    $token_valid = $client->getLastResponse()->getStatusCode() == 200;
    $scopes = $client->getLastResponse()->getHeader('X-Oauth-Scopes');
    $api_error = NULL;
  }
  catch (Exception $e) {
    $api_error = $e->getMessage();
    $repos = array();
    $repo_count = 0;
    $scopes = array();
  }

  $app_password = variable_get('devshop_bitbucket_app_password', '');
  $ssh_key = variable_get('devshop_public_key', '');

  $t = array(
    '%scopes' => implode(', ', (array) $scopes),
    '!create_token' => l(t('Create new token'), 'https://id.atlassian.com/manage-profile/security/api-tokens', array(
      'attributes' => array(
        'target' => '_blank'))),
    '!create_password' => l(t('Create new app password'), 'https://bitbucket.org/account/settings/app-passwords/', array(
      'attributes' => array(
        'target' => '_blank'))),
    '!docs_auth' => l(t('BitBucket Authorization Documentation'), 'https://developer.atlassian.com/cloud/bitbucket/rest/intro/', array(
      'attributes' => array(
        'target' => '_blank'))),
    '!docs_app_password' => l(t('BitBucket App Passwords Documentation'), 'https://developer.atlassian.com/cloud/bitbucket/rest/intro/#app-passwords', array(
      'attributes' => array(
        'target' => '_blank'))),
    '!docs_tokens' => l(t('BitBucket Access Tokens Documentation'), 'https://developer.atlassian.com/cloud/bitbucket/rest/intro/#access-tokens', array(
      'attributes' => array(
        'target' => '_blank'))),
    '!manage_keys' => l(t('BitBucket SSH Keys'), 'https://bitbucket.org/account/settings/ssh-keys/', array(
      'attributes' => array(
        'target' => '_blank'))),
    '!manage_passwords' => l(t('BitBucket App Passwords'), 'https://bitbucket.org/account/settings/ssh-keys/', array(
      'attributes' => array(
        'target' => '_blank'))),
    '!devshop_settings' => l(t('DevShop Public Key'), current_path(), array(
      'fragment' => 'edit-server')),
    '!devshop_add_key' => l(t('Add DevShop Public Key to BitBucket'), 'admin/hosting/bitbucket/add-key', array(
      'attributes' => array(
      ),
      'query' => array('destination' => current_path()))),
  );

  if ($repo_count == 1) {
    $t['!repo_access'] = $repo_link;
  }
  elseif ($repo_count < 10) {
    $t['!repo_access'] = t('!first and @other', array(
      '!first' => $repo_link,
      '@other' => format_plural($repo_count - 1, t('1 other repository'), t('@count other repositories')),
    ));
  }
  else {
    $t['!repo_access'] = t('!first and more than 10 other repositories', array(
      '!first' => $repo_link,
    ));
  }

  $form['bitbucket'] = array(
    '#title' => t('BitBucket Integration'),
    '#type' => 'fieldset',
    '#group' => 'settings',
    '#weight' => -2,
  );

  $form['bitbucket']['features']  = array(
    '#type' => 'container',
    '#attributes' => array(
      'class' => array(
        'alert alert-info'
      )
    )
  );
  $form['bitbucket']['features']['list'] = array(
    '#theme' => 'item_list',
    '#prefix' => '<i class="fa fa-question-circle fa-2x pull-left"></i><div>' . t('DevShop integrates with BitBucket to provide a number of features:'),
    '#suffix' => '</div>',
    '#items' => array(
      t('Loads a list of available repositories for creating new projects.'),
      t('Post task status to BitBucket Build Status.'),
      t('Create environments from Pull Requests.'),
    ),
    '#attributes' => array(
      'class' => array('text text-dark')
    )
  );

  $form['bitbucket']['help'] = array(
    '#title' => t('API Access'),
    '#description' => t('DevShop can connect to BitBucket with one of 2 methods: App Passwords and Access Tokens. View !docs_auth for more information.', $t),
    '#type' => 'item',
  );
  $form['bitbucket']['devshop_bitbucket_authentication_method'] = array(
    '#title' => t('Authentication Method'),
    '#type' => 'radios',
    '#options' => array(
      'token' => t('Access Token'),
      'password' => t('App Password'),
    ),
    '#default_value' => variable_get('devshop_bitbucket_authentication_method', 'token'),
  );
  $form['bitbucket']['tokens'] = array(
    '#type' => 'container',
    '#states' => array(
      'visible' => array(
        ':input[name=devshop_bitbucket_authentication_method]' => array(
          'value' => 'token',
        )
      )
    )
  );

  $form['bitbucket']['tokens']['help'] = array(
    '#type' => 'item',
    '#description' => t('Access Tokens can be created for Repositories, Projects, or Workspaces. To create a new token, visit your repository, project, or workspace settings page, then click "Access tokens".', $t),
  );
  $form['bitbucket']['tokens']['devshop_bitbucket_token'] = array(
    '#type' => 'password',
    '#title' => t('Bitbucket Access Token'),
    '#description' => t('The access token to use when connecting to BitBucket.', $t),
    '#maxlength' => '1024',
    '#default_value' => variable_get('devshop_bitbucket_token', ''),
    '#element_validate' => array(
      'devshop_bitbucket_settings_form_validate_api',
    ),
    '#attributes' => array(
      'placeholder' => $token? t('Replace the current BitBucket Token'): t('Enter a BitBucket Access Token'),
    ),
  );
  $form['bitbucket']['passwords'] = array(
    '#type' => 'container',
    '#states' => array(
      'visible' => array(
        ':input[name=devshop_bitbucket_authentication_method]' => array(
          'value' => 'password',
        )
      )
    ),
  );
  $form['bitbucket']['passwords']['help'] = array(
    '#type' => 'item',
    '#description' => t('Using an app password allows DevShop to make API calls as your Bitbucket account to all repositories the user can access.'),
  );
  $form['bitbucket']['passwords']['devshop_bitbucket_app_username'] = array(
    '#title' => t('BitBucket Username'),
    '#description' => t('The username to use when connecting to the BitBucket API.'),
    '#type' => 'textfield',
    '#default_value' => variable_get('devshop_bitbucket_app_username', ''),
    '#attributes' => array(
      'placeholder' => t('Enter a BitBucket username.'),
    ),
  );
  $form['bitbucket']['passwords']['devshop_bitbucket_app_password'] = array(
    '#type' => 'password',
    '#title' => t('App Password'),
    '#description' => t('An app password for this user. !create_password', $t),
    '#default_value' => variable_get('devshop_bitbucket_app_password', ''),
    '#element_validate' => array(
      'devshop_bitbucket_settings_form_validate_app_password',
    ),
    '#attributes' => array(
      'placeholder' => $app_password? t('Replace the current BitBucket App Password'): t('Enter a BitBucket App Password'),
    ),
  );
  // Test for public key access.
  if (empty($token)) {
    $access_message = t('Token: not set up.');
    $access_class = 'warning';
    $access_icon = 'warning';
    $access_note = t('Enter a token to connect this DevShop to your BitBucket repositories.');
  }
  elseif (!$token_valid) {
    $access_message = t('Connection Unsuccessful.');
    $access_class = 'danger';
    $access_icon = 'warning';
    $access_note = t('The BitBucket credentials are invalid or has expired.');
  }
  else {
    $access_message = t('Connection Successful');
    $access_class = 'success';
    $access_icon = 'check';
    $access_note = t('Connected to BitBucket API, with access to !repo_access. Scopes: %scopes.', $t);
  }
  $form['bitbucket']['token_status'] = array(
    '#type' => 'container',
    'status' => array(
      '#type' => 'item',
      '#title' => $access_message,
      '#prefix' => "<div class='alert alert-$access_class'><i class='fa fa-$access_icon pull-left'></i>",
      '#description' => $access_note,
      '#suffix' => '</div>',
    ),
  );

  // SSH Key access
  if (empty($ssh_key)) {
    $access_message = t('Unknown Public Key');
    $access_class = 'warning';
    $access_icon = 'check';
    $access_note = t("DevShop does not know the server's public key. See !devshop_settings.", $t);
  }
  elseif (empty($token)) {
    $access_message = t('Public Key: not set up.');
    $access_class = 'warning';
    $access_icon = 'warning';
    $access_note = t('Enter a token to check SSH access to your repositories.');
  }
  elseif (!$token_valid) {
    $access_message = t('Public Key: Invalid token.');
    $access_class = 'danger';
    $access_icon = 'warning';
    $access_note = t('Unable to check for SSH access without a valid token.');
  }
  elseif (!devshop_bitbucket_check_key()) {
    $access_message = t('Public Key: Not Found');
    $access_class = 'warning';
    $access_icon = 'warning';
    $access_note = t("The !devshop_settings was not found in account !user. You can: ", $t);
    $access_note .= theme('item_list', array(
      'type' => 'ol',
      'items' => array(
        t('Automatically !devshop_add_key.', $t),
        t('Manually add the !devshop_settings to your BitBucket account on the !bitbucket_keys page.', $t),
        t('Add the !devshop_settings to each repository as a Deploy Key.', $t),
        t('Configure SSH manually on the server.', $t),
      )));
  }
  else {
    $access_message = t('Public Key has access.');
    $access_class = 'success';
    $access_icon = 'check';
    $access_note = t("The DevShop Public Key was found in !user's account.", $t);
  }
  $form['bitbucket']['key_status'] = array(
    '#type' => 'item',
    '#title' => $access_message,
    '#prefix' => "<div class='alert alert-$access_class'><i class='fa fa-$access_icon pull-left'></i>",
    '#description' => $access_note,
    '#suffix' => '</div>',
  );

  $form['bitbucket']['message'] = array(
    '#prefix' => "<div class='alert alert-success'><i class='fa fa-check'></i> ",
    '#suffix' => '</div>',
    '#markup' =>  format_plural($repo_count, t('DevShop can access 1 BitBucket Repository'), t('DevShop can access @count BitBucket repositories.')));

  return system_settings_form($form);
}

/**
 * Retrieve the token from either environment variable or drupal variable.
 * @return mixed
 */
function devshop_bitbucket_token() {

  // If ENV var is set, use that instead
  if (!empty($_SERVER['BITBUCKET_TOKEN'])) {
    $token = $_SERVER['BITBUCKET_TOKEN'];
  }

  // If no ENV var, load Drupal variable.
  else {
    $token = variable_get('devshop_bitbucket_token', '');
  }

  return $token;
}

/**
 * Check if a token is valid. Checks the stored token if none is passed in.
 *
 * @param null $token
 *   A specific token to check.
 *
 * @return bool|\Exception
 */
function devshop_bitbucket_token_is_valid($token = NULL) {

  if (empty($token)) {
    $token = devshop_bitbucket_token();
  }

  $client = new \Bitbucket\Client();
  $client->authenticate($token, bitbucket\Client::AUTH_OAUTH_TOKEN);

  try {
    $user = $client->currentUser();
    return TRUE;
  }
  catch (Exception $e) {
    return FALSE;
  }
}

/**
 * Implements hook_form_alter().
 */
function devshop_bitbucket_form_devshop_project_create_step_git_alter(&$form, &$form_state, $form_id) {

  // Look for Token
//  $token = variable_get('devshop_bitbucket_token', '');
//
//  if (empty($token)) {
//    $form['connect']['#description'] = ' <div class="alert alert-danger">' . t('bitbucket API Token was not found.') . ' ' . l(t('Configure DevShop bitbucket Settings'), 'admin/hosting/bitbucket') . '</div>';
//    return;
//  }
//
//  if (devshop_bitbucket_check_key()) {
//    $form['connect']['#description'] = ' <div class="alert alert-success">' . t('The DevShop Public SSH Key has been found in your bitbucket account.') . '</div>';
//  }
//  else {
//    $form['connect']['#description'] = t('The DevShop Public SSH Key was not found in your account.') . '  ';
//
//    $form['connect']['#description'] .= l(t('Add devshop public key to your bitbucket account'), 'admin/hosting/bitbucket/add-key', array(
//            'query' => array(
//              'destination' => $_GET['q'],
//            ),
//            'attributes' => array(
//                'class' => 'btn btn-success'
//            ),
//        )) . '</div>';
//    $form['connect']['#prefix'] = '<div class="alert alert-danger">';
//    $form['connect']['#suffix'] = '</div>';
//  }
}


/**
 * Implements hook_form_FORM_ID_alter() for project_node_form().
 */
function devshop_bitbucket_form_devshop_project_create_step_sites_alter(&$form, &$form_state) {
//
//  // Return if project isn't ready.
//  if (empty($form['install_profile'])) {
//    return;
//  }
//
//  // Return if there is no bitbucket token
//  $bitbucket_token = variable_get('devshop_bitbucket_token', '');
//  if (empty($bitbucket_token)) {
//    return;
//  }
//
//  // Load project and bitbucket
//  $project_node = node_load($form['nid']['#value']);
//  $project = $project_node->project;
//
//  // Return if provider is not bitbucket.
//  if ($project->git_provider != 'bitbucket') {
//    return;
//  }
//
//  // Return if deploy method is not webhook.
//  if ($project->settings->deploy['method'] != 'webhook') {
//    return;
//  }
//
//  $repo = $project->bitbucket_owner . '/' . $project->bitbucket_repo;
//  $repo_url = "http://bitbucket.com/" . $repo;
//
//  $form['bitbucket_webhook'] = array(
//    '#title' => t('Setup bitbucket Webhook'),
//    '#description' => t('Leave this box checked to automatically add a webhook to your bitbucket Repository !link.', array(
//      '!link' => l($repo, $repo_url, array(
//          'attributes' => array(
//            'target' => '_blank',
//          ),
//      ))
//    )),
//    '#type' => 'checkbox',
//    '#default_value' => 1,
//  );
//
//  $form['#validate'][] = 'devshop_bitbucket_project_create_webhook';
//  $form['#submit'][] = 'devshop_bitbucket_project_create_webhook';
}

/**
 * Extra submit hook for last step of project create form.
 */
function devshop_bitbucket_project_create_webhook($form, $form_state) {
//
//  // Return if box is not checked.
//  if (empty($form_state['values']['bitbucket_webhook'])) {
//    return;
//  }
//
//  // Get Project
//  $project_node = node_load($form['nid']['#value']);
//  $project = $project_node->project;
//
//  // Get bitbucket client
//  $client = new bitbucket\Client();
//  $bitbucket_token = variable_get('devshop_bitbucket_token', '');
//  $client->authenticate($bitbucket_token, bitbucket\Client::AUTH_HTTP_TOKEN);
//
//  // Create the webhook.
//  try {
//    $hook = $client->repo()->hooks()->create($project->bitbucket_owner, $project->bitbucket_repo, array(
//        'name' => 'web',
//        'active' => true,
//        'events' => array(
//            'push',
//            'pull_request',
//            'delete',
//            'release',
//        ),
//        'config' => array(
//            'url' => $project->webhook_url,
//            'content_type' => 'json',
//            'insecure_ssl' => '1',
//        ),
//    ));
//  }
//  catch (bitbucket\Exception\ValidationFailedException $e) {
//    // For some reason, bitbucket always returns an exception here when there is already webhooks on the project.
//    if ($e->getMessage() == 'Validation Failed: Hook already exists on this repository') {
//      drupal_set_message(t("bitbucket webhook added, but there is already an existing webhook. Please check your repository's !link.", array(
//          '!link' => l(t('Webhook Settings'), $project->git_repo_url . '/settings/hooks'),
//      )), 'warning');
//    }
//    else {
//      drupal_set_message(t('bitbucket Validation Exception: !exception', array('!exception' => $e->getMessage())), 'error');
//    }
//  }
//  catch (bitbucket\Exception\RuntimeException $e) {
//    drupal_set_message(t('bitbucket Runtime Exception: !exception', array('!exception' => $e->getMessage())), 'error');
//  }
}

/**
 * Implements hook_node_load().
 */
function devshop_bitbucket_node_load($nodes, $types) {
  if (count(array_intersect(array('project'), $types))) {
    foreach ($nodes as $nid => $node) {

      // Look for a pull request object.
      $pull_requests = db_query('SELECT * FROM {hosting_devshop_bitbucket_pull_requests} WHERE project_nid = :project_nid', array(':project_nid' => $nid));
      foreach ($pull_requests as $pull_request) {
        if (!empty($pull_request->pull_request_object)) {
          $pull_request->pull_request_object = unserialize($pull_request->pull_request_object);
          if (isset($node->project->environments[$pull_request->environment_name])) {
            $node->project->environments[$pull_request->environment_name]->bitbucket_pull_request = $pull_request;
          }
        }
      }

      // Parse bitbucket owner and repo.
      if (isset($node->project) && $node->project->git_provider == 'bitbucket') {
        $node->project->bitbucket_owner =
          $parts = explode('/', parse_url($node->project->git_repo_url, PHP_URL_PATH));
        $node->project->bitbucket_owner = $parts[1];
        $node->project->bitbucket_repo = $parts[2];
      }
    }
  }

}

/**
 * Implements hook_node_update() for task insert.
 *
 * If task is a test run, send a "pending" commit status.
 */
function devshop_bitbucket_node_update($node) {
//
//  // Only act on test triggers.
//  if ($node->type != 'task' || $node->type == 'task' && ($node->task_type != 'test' || $node->task_type != 'deploy')) {
//    return;
//  }
//
//  // Load the site and check for environment.
//  $site = node_load($node->rid);
//  if (empty($site->environment) || empty($site->environment->bitbucket_pull_request) || empty($site->environment->settings->deploy['test'])) {
//    return;
//  }
//
//  try {
//    $token = variable_get('devshop_bitbucket_token', '');
//    $client = new \bitbucket\Client();
//    $client->authenticate($token, bitbucket\Client::AUTH_HTTP_TOKEN);
//
//    // Create a deployment status
//    $project = $site->project;
//    $owner = $project->bitbucket_owner;
//    $repo = $project->bitbucket_repo;
//    $sha = $site->environment->bitbucket_pull_request->pull_request_object->head->sha;
//
//    $params = new stdClass();
//    $params->state = 'pending';
//
//    if ($node->task_type != 'test') {
//      $params->target_url = url(
//        "node/{$node->nid}",
//        array('absolute' => true)
//      );
//      $params->description = t('DevShop: Run Tests');
//      $params->context = 'devshop/tests';
//    }
//    elseif ($node->task_type != 'deploy') {
//      $params->target_url = $site->environment->url;
//      $params->description = t('DevShop: Deploy');
//      $params->context = 'devshop/deploy';
//    }
//
//    // Post status to bitbucket
//    $status = $client->getHttpClient()->post("/repos/$owner/$repo/statuses/$sha", json_encode($params));
//
//    watchdog('devshop_bitbucket','Test run initiated. bitbucket has been notified.');
//  } catch (bitbucket\Exception\RuntimeException $e) {
//    watchdog('devshop_bitbucket', 'bitbucket Runtime Error in devshop_bitbucket_node_update(): ' . $e->getMessage());
//  }
}


/**
 *
 */
function devshop_bitbucket_comment($task, $status) {

  $output = array();
  $output[] = '> **DEVSHOP**';
  $output[] = '> ' . ucfirst($task->task_type) .  ": " . _hosting_parse_error_code($status);
  $output[] = '> Site: ' . $task->ref->environment->url;
  $output[] = '> Project: ' . url("node/{$task->ref->project->nid}", array('absolute' => TRUE));

  if ($task->task_type == 'test') {
    $output[] = 'Results: ' . url("node/{$task->nid}", array('absolute' => TRUE));
  }

  if ($task->task_type == 'import') {
    $output[] = t('Your environment is now available.');
  }

  return implode("\n", $output);
}



/**
 * bitbucket action to take on webhook init
 */
function devshop_bitbucket_webhook($project_node) {
  $headers = getallheaders();
  $project = $project_node->project;

  // Create a bitbucket deployment
//  require_once 'vendor/autoload.php';

  // @TODO: Handle form content from bitbucket as well.
  if ($headers['Content-Type'] == 'application/json' || $headers['content-type'] == 'application/json') {
    $data = json_decode(file_get_contents('php://input'));

//    watchdog('debug', $GLOBALS['HTTP_RAW_POST_DATA']);
//    watchdog('debug', print_r($data, 1));

    $args = array();
    $args['cache'] = 1;

    if (isset($headers['X-Event-Key'])) {
      $bitbucket_event = $headers['X-Event-Key'];
    }
    else {
      $bitbucket_event = '';
    }

    switch ($bitbucket_event) {
      case 'ping':
        $message = 'Pong!';
        break;
      case 'repo:push':

        // If push is for a deleted branch, don't do anything.
//        if ($data->deleted && $data->after == "0000000000000000000000000000000000000000") {
//          $message = 'Deleted ref detected.';
//          break;
//        }

        // Limit "Deploy" tasks to only run for the branches we have new code for..
        $git_ref = $data->push->changes[0]->new->name;

        // Check for environments set to pull
        $environments_to_pull = array();
        foreach ($project->environments as $environment_name => $environment) {

          // Only pull if deploy is not disabled or if environment is tracking a tag.
          if ($git_ref == $environment->git_ref && !$environment->settings->pull_disabled && !in_array($environment->git_ref, $project->settings->git['tags'])) {
            $environments_to_pull[] = $environment->name;


            // Default args to the environments deploy settings.
            $args = $environment->settings->deploy;
            $args['git_ref'] = $environment->git_ref;

            if (isset($environment->site) && $node = node_load($environment->site)) {
              hosting_add_task($environment->site, 'deploy', $args);
            }
          }
        }

        $message = "Push Received for git ref $git_ref. Deploying code to environments: " . implode(', ', $environments_to_pull);
        break;

      case 'pullrequest:created':
      case 'pullrequest:updated':
      case 'pullrequest:declined':
      case 'pullrequest:merged':

        // If pull request environments is enabled...
        if ($project->settings->bitbucket['pull_request_environments']) {
          $message = 'Pull Request Received.';

          // @TODO: Handle forks?
          $branch = $data->pullrequest->source->branch->name;

          // Determine environment branch.
          // @TODO: Make Configurable, allow branch names to be env name
          //   $environment_name = "pr" . $data->pull_request->number;
          $environment_name = 'branch_' . strtr($branch, array(
             '-' => '_',
             '/' => '_',
            ));
          $already_have_pr_info = FALSE;

          // When PR is opened... create new environment.
//          if ($data->action == 'opened' || $data->action == 'reopened') {
          if ($data->pullrequest->state == 'OPEN') {
            $message = "Detected Pull Request creation for $branch \n";
            if (isset($project->environments[$environment_name])) {
              $message = "Environment $environment_name already exists! Not creating one... \n";

              // @TODO: Check for environments that are being deleted.
              if (isset($project->environments[$environment_name]->bitbucket_pull_request)) {
                $message .= "Already have a PR for $environment_name ... not inserting.";
                $already_have_pr_info = TRUE;
              }
            }
            else {
              // If method is "install"...
              if ($project->settings->bitbucket['pull_request_environments_method'] == 'devshop__bitbucket__install') {
                hosting_create_environment($project, $environment_name, $branch);
                $message .= "Environment $environment_name created for $project_node->title via installation profile.\n";
              }
              // Otherwise, it is a clone from live.
              elseif (isset($project->environments[$project->settings->bitbucket['pull_request_environments_method']] )) {
                $source_env = $project->settings->bitbucket['pull_request_environments_method'];
                hosting_create_environment($project, $environment_name, $branch, $source_env);
                $message .= "Environment $environment_name created for $project_node->title via cloning $source_env \n";
              }
              else {
                $message .= 'Unable to determine what to do! Check "Pull Request Environment Method" setting.';
              }
            }
//
//            $owner = $project->bitbucket_owner;
//            $repo = $project->bitbucket_repo;
//            $message .= "About to try to create a deployment for $owner/$repo...  \n";
//
//            // Send a "deployment" to bitbucket.
//            try {
//              $token = variable_get('devshop_bitbucket_token', '');
//              $client = new \bitbucket\Client();
//              $client->authenticate($token, bitbucket\Client::AUTH_HTTP_TOKEN);
//
//              $sha = $data->pull_request->head->sha;
//              $environment_name_url = str_replace('_', '-', $environment_name);
//              $url = "http://{$environment_name_url}.{$project->base_url}";
//
//              $params = new stdClass();
//              $params->ref = $sha;
//              $params->environment = $url;
//              $params->required_contexts = array();
//              $post_url = "/repos/$owner/$repo/deployments";
//              $deployment = json_decode($client->getHttpClient()->post($post_url, json_encode($params))->getBody(TRUE));
//
//              // Save deployment to pull request data for later access.
//              $data->pull_request->deployment = $deployment;
//
//              $message .= " Deployment Created! \n";
//
//              // Create deployment status
//              $params = new stdClass();
//              $params->state = 'pending';
//              $params->target_url = $url;
//              $params->description = t('New environment is being created.  Please stand by.');
//              $deployment_status = $client->getHttpClient()->post("/repos/$owner/$repo/deployments/{$deployment->id}/statuses", json_encode($params));
//
//              $message .= " Deployment Status Created! \n";
//
//              // Set a commit status for this REF for devshop/deploy context
//              $sha = $data->pull_request->head->sha;
//
//              $params = new stdClass();
//              $params->state = 'pending';
//              $params->target_url = url("node/$project->nid", array('absolute' => TRUE));
//              $params->description = t('DevShop: Deploy');
//              $params->context = 'devshop/deploy';
//
//              // Post status to bitbucket
//              $status = $client->getHttpClient()->post("/repos/$owner/$repo/statuses/$sha", json_encode($params));
//              $message .= " Commit Status Created! \n";
//
//              // Determine if we are going to run tests.
//              // For now it is using the "live environment" setting.
//              // @TODO: Once we add "deploy hooks" to "Project Settings: Environment Defaults" we will have to change this.
//
//              // If live environment is set to run tests on deploy...
//              $live_environment = $project->settings->live['live_environment'];
//              if ($project->environments[$live_environment]->settings->deploy['test']) {
//                $params = new stdClass();
//                $params->state = 'pending';
//                $params->target_url = url(
//                  "node/$project->nid",
//                  array('absolute' => true)
//                );
//                $params->description = t('DevShop: Run Tests');
//                $params->context = 'devshop/tests';
//
//                // Post status to bitbucket
//                $status = $client->getHttpClient()->post(
//                  "/repos/$owner/$repo/statuses/$sha",
//                  json_encode($params)
//                );
//                $message .= " Commit Status for pending test run Created! \n";
//              }
//
//            } catch (bitbucket\Exception\RuntimeException $e) {
//              watchdog('devshop_bitbucket', 'bitbucket Runtime Error: ' . $e->getMessage());
//              $message .= 'bitbucket RunTimeException during PR Create: ' . $e->getMessage() . $e->getCode();
//              if ($e->getCode() == '409') {
//                $message .= "\n Branch is out of date! alert the developer!";
//
//                // Send a failed commit status to alert to developer
//                $params = new stdClass();
//                $params->state = 'failure';
//                $params->target_url = $project->git_repo_url;
//                $params->description = t('Branch is out of date! Merge from default branch.');
//                $params->context = 'devshop/merge';
//
//                // Post status to bitbucket
//                $status = $client->getHttpClient()->post("/repos/$owner/$repo/statuses/$sha", json_encode($params));
//              }
//
//            } catch (bitbucket\Exception\ValidationFailedException $e) {
//              watchdog('devshop_bitbucket', 'bitbucket Validation Failed Error: ' . $e->getMessage());
//              $message .= 'bitbucket ValidationFailedException Error: ' . $e->getMessage();
//            }

            // Insert PR record
            if (!$already_have_pr_info) {
              $info = new stdClass();
              $info->id = $data->pullrequest->id;
              $info->number = $data->pullrequest->id;
              $info->project_nid = $project->nid;
              $info->environment_name = $environment_name;
              $info->pull_request_object = serialize($data->pullrequest);

              // Save environment record.

              // @TODO : We have to alter our schema. BitBucket doesn't offer unique PR Ids
//              if (drupal_write_record('hosting_devshop_bitbucket_pull_requests', $info)) {
//                $message .= ' ' . t('Pull Request info saved to DevShop.');
//              }
            }
          }

          // When PR is updated, send a new deployment status environment.
          elseif ($data->action == 'synchronize') {
//
//            // Create a new deployment
//            $owner = $project->bitbucket_owner;
//            $repo = $project->bitbucket_repo;
//            $message .= "About to set deployment status for $owner/$repo...  \n";
//
//            try {
//              $token = variable_get('devshop_bitbucket_token', '');
//              $client = new \bitbucket\Client();
//              $client->authenticate($token, bitbucket\Client::AUTH_HTTP_TOKEN);
//
//              $sha = $data->pull_request->head->sha;
//              $environment = (object) $project->environments[$environment_name];
//
//              $params = new stdClass();
//              $params->ref = $sha;
//              $params->environment = $environment->url;
//              $params->required_contexts = array();
//              $post_url = "/repos/$owner/$repo/deployments";
//              $deployment = json_decode($client->getHttpClient()->post($post_url, json_encode($params))->getBody(TRUE));
//
//              // Save deployment to pull request data for later access.
//              $data->pull_request->deployment = $deployment;
//
//              $message .= " Deployment Created! \n";
//
//              // Create deployment status
//              $deployment_id = $deployment->id;
//
//              $params = new stdClass();
//              $params->state = 'pending';
//              $params->target_url = $environment->url;
//              $params->description = t('Code is being deployed.  Please stand by.');
//
//              $post_url = "/repos/$owner/$repo/deployments/{$deployment_id}/statuses";
//              $message .= "Attempting to create deployment status: $post_url \n";
//
//              $deployment_status = $client->getHttpClient()->post($post_url, json_encode($params));
//
//              $message .= " Deployment Status Created! \n";
//
//              // Set a commit status for this REF for devshop/deploy context
//              $sha = $data->pull_request->head->sha;
//
//              $params = new stdClass();
//              $params->state = 'pending';
//              $params->target_url = url("node/$project->nid", array('absolute' => TRUE));
//              $params->description = t('DevShop: Deploy');
//              $params->context = 'devshop/deploy';
//
//              // Post status to bitbucket
//              $status = $client->getHttpClient()->post("/repos/$owner/$repo/statuses/$sha", json_encode($params));
//
//              $message .= " Commit Status Created! \n";
//
//              // If environment is configured to run tests, add another status.
//              if (!empty($environment->settings->deploy['test'])) {
//                $params = new stdClass();
//                $params->state = 'pending';
//
//                // @TODO: Add the link to the last "test" task here instead of the project.
//                $params->target_url = url("node/$project->nid", array('absolute' => TRUE));
//                $params->description = t('DevShop: Run Tests');
//                $params->context = 'devshop/tests';
//
//                // Post status to bitbucket
//                $status = $client->getHttpClient()->post("/repos/$owner/$repo/statuses/$sha", json_encode($params));
//
//                $message .= " Commit Status Created for test runs! \n";
//              }
//
//            } catch (bitbucket\Exception\RuntimeException $e) {
//              $log = 'bitbucket API Error during PR Syncronize: ' . $e->getMessage() . $e->getCode();
//              watchdog('devshop_bitbucket', $log);
//
//              if ($e->getCode() == '409') {
//                $log .= "\n Out of date! alert the developer!";
//
//                // Send a failed commit status to alert to developer
//                $params = new stdClass();
//                $params->state = 'failure';
//                $params->target_url = $project->git_repo_url;
//                $params->description = t('Branch is out of date! Merge from default branch.');
//                $params->context = 'devshop/merge';
//
//                // Post status to bitbucket
//                $status = $client->getHttpClient()->post("/repos/$owner/$repo/statuses/$sha", json_encode($params));
//              }
//              $message .= $log . "\n";
//            }


            // Update the PR record
            $info = new stdClass();
            $info->id = $data->pullrequest->id;
            $info->number = $data->pullrequest->id;
            $info->project_nid = $project->nid;
            $info->environment_name = $environment_name;
            $info->pull_request_object = serialize($data->pullrequest);

            // Save environment record.
            if (isset($project->environments[$environment_name]->bitbucket_pull_request)) {
              $update = array('id');
            }
            else {
              $update = array();
            }

            // @TODO: We have to alter our schema.
//            if (drupal_write_record('hosting_devshop_bitbucket_pull_requests', $info, $update)) {
//              $message .= ' ' . t('Pull Request info saved to DevShop.');
//            }
          }
          // When PR is closed, delete environment.
          elseif ($data->pullrequest->state == 'rejected' || $data->pullrequest->state == 'fulfilled') {

            $message .= "Pull Request Closed \n";
            if ($project->settings->bitbucket['pull_request_environments_delete']) {

              // If environment has a site... trigger it's deletion.
              // Platform deletion triggers after site deletion completes.
              if ($project->environments[$environment_name]->site) {
                hosting_add_task($project->environments[$environment_name]->site, 'delete');
                $message .= "Environment $environment_name (Site Node: {$project->environments[$environment_name]->site}) scheduled for deletion.";
              }
              // If environment has a platform... trigger it's deletion.
              elseif ($project->environments[$environment_name]->platform) {
                hosting_add_task($project->environments[$environment_name]->platform, 'delete');
                $message .= "Environment $environment_name (Platform Node: {$project->environments[$environment_name]->platform}) scheduled for deletion.";
              }
            }
          }
        }
        break;
    }

  }
  else {
    $message = 'bitbucket Request Received, but not in JSON. Please make sure to configure the webhook to use Payload version: application/vnd.bitbucket.v3+json';
  }
  return $message;
}

/**
 * Check the bitbucket account for an SSH key.
 *
 * @return bool
 */
function devshop_bitbucket_check_key() {
//  $devshop_key = variable_get('devshop_public_key', '');
//  $token = variable_get('devshop_bitbucket_token', '');
//
//  $client = new \bitbucket\Client();
//  $client->authenticate($token, bitbucket\Client::AUTH_HTTP_TOKEN);
//
//  try {
//    $keys = $client->currentUser()->keys()->all();
//  }
//    // Happens when user has no public keys.
//  catch (\bitbucket\Exception\RuntimeException $e) {
//    return FALSE;
//  }
//
//  foreach ($keys as $key) {
//    if (strpos($devshop_key, $key['key']) === 0) {
//      return TRUE;
//    }
//  }
}

/**
 * Element validation for app password.
 *
 * @param $element
 * @param $form_state
 * @param $form
 */
function devshop_bitbucket_settings_form_validate_app_password($element, &$form_state, $form)
{

}

/**
 * Element validation for access token.
 *
 * @param $element
 * @param $form_state
 * @param $form
 */
function devshop_bitbucket_settings_form_validate_api($element, &$form_state, $form) {

  // If no token in form element, keep the existing variable.
  $token = $form_state['values']['devshop_bitbucket_token'];
  if (empty($token)) {
    form_set_value($element, variable_get('devshop_bitbucket_token'), $form_state);
  }
  $password = $form_state['values']['devshop_bitbucket_app_password'];
  if (empty($password)) {
    form_set_value($element, variable_get('devshop_bitbucket_app_password'), $form_state);
  }

  $client = devshop_bitbucket_client();

  $app_user = $form_state['values']['devshop_bitbucket_app_username'];
  $app_password = $form_state['values']['devshop_bitbucket_app_password'];
  if ($form_state['values']['devshop_bitbucket_authentication_method'] == 'password') {
    $client = new Bitbucket\Client();
    $client->authenticate(
      Bitbucket\Client::AUTH_HTTP_PASSWORD,
      $app_user,
      $app_password
    );
  }
  else {
    $client = new Bitbucket\Client();
    $client->authenticate(
      Bitbucket\Client::AUTH_OAUTH_TOKEN,
      $token
    );
  }

  try {

      // Get all repos where key owner is a member.
      $data = $client->repositories()->list([
        'role' => 'member'
      ]);
      form_set_value($form, $token, $form_state);
      $scopes = $client->getLastResponse()->getHeader('X-Oauth-Scopes');
      drupal_set_message(t('Successully connected to BitBucket API with scopes: %scopes', array(
        '%scopes' => implode(', ', $scopes),
      )));
  }
  catch (Exception $e) {
    form_error($element,  t('BitBucket Token was rejected: %message', array(
      '%message' => $e->getMessage(),
    )));
  }
}
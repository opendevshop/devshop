<?php
/**
 * @file
 * The hosting server data example.
 */

use Symfony\Component\Yaml\Yaml;

/**
 * Implements hook_permission()
 */
function ansible_variables_permission() {
  return array(
    'configure server ansible variables' => array(
      'name' => t('Configure server ansible variables'),
      'description' => t('Allows customizing a servers ansible variables. Use with Caution'),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function ansible_variables_form_alter(&$form, $form_state, $form_id) {
  if ($form_id == 'server_node_form') {

    $form['ansible_variables'] = array(
      '#type' => 'fieldset',
      '#title' => t('Server Configuration'),
      '#description' => t('Override configuration options for this server using Ansible variables.'),
      '#weight' => 10,
      '#access' => user_access('configure server ansible variables'),
    );

    $form['ansible_variables']['ansible_variables_raw'] = array(
      '#type' => 'textarea',
      '#title' => t('Ansible Variables'),
      '#description' => t('Enter any ansible variables that you would like to override for this server.  <em>Use caution!</em> Do not override any existing variables unless you know what you are doing.'),
      '#default_value' => isset($form['#node']->ansible_variables_raw) ? $form['#node']->ansible_variables_raw : '',
      '#weight' => 0,
      '#element_validate' => array(
        'ansible_variables_form_validate'
      ),
    );

    $form['ansible_variables']['variables'] = array(
      '#type' => 'fieldset',
      '#title' => t('Existing Variables'),
       '#collapsible' => TRUE,
       '#collapsed' => TRUE,
    );
    $dumper = new \Symfony\Component\Yaml\Dumper();
    $form['ansible_variables']['variables']['yml'] = array(
      '#markup' => $dumper->dump($form['#node']->ansible_vars, 5, 4, FALSE),
      '#prefix' => '<pre>',
      '#suffix' => '</pre>'
    );
    $form['ansible_variables']['variables']['note'] = array(
        '#markup' => t('These variables are generated by this site from server data.'),
    );
    return $form;
  }
}

/**
 * Form element validator for Ansible Variables.
 *
 * @param $element
 * @param $form_state
 * @param $form
 */
function ansible_variables_form_validate($element, &$form_state, $form) {
    $parser = new Symfony\Component\Yaml\Parser();

    try {
      $parser->parse($element['#value']);
    }
    catch (\Symfony\Component\Yaml\Exception\ParseException $e) {
      form_set_error('ansible_variables_raw', t('YAML did not validate. Please try again: ') . $e->getMessage());
    }
}

/**
 * Implements hook_node_insert().
 */
function ansible_variables_node_insert($node) {
  if ($node->type == 'server' && !empty($node->ansible_variables_raw)) {
    $id = db_insert('ansible_variables')->fields(array(
      'vid' => $node->vid,
      'nid' => $node->nid,
      'ansible_variables' => $node->ansible_variables_raw,
    ))
    ->execute();
  }
}

/**
 * Implements hook_node_update().
 */
function ansible_variables_node_update($node) {
  if (FALSE === db_query("SELECT ansible_variables FROM {ansible_variables} WHERE vid = :vid", array(':vid' => $node->vid))->fetchField()) {
    ansible_variables_node_insert($node);
  }
  else {
    db_update('ansible_variables')
      ->fields(array(
        'ansible_variables' => $node->ansible_variables_raw,
      ))
      ->condition('vid', $node->vid)
      ->execute();
  }
}

/**
 * Implements hook_node_load().
 */
function ansible_variables_node_load($nodes, $types) {
  foreach ($nodes as $nid => &$node) {
    if ($node->type == 'server') {

      // Load raw YAML
      $nodes[$nid]->ansible_variables_raw = db_query("SELECT ansible_variables FROM {ansible_variables} WHERE vid = :vid", array(':vid' => $node->vid))->fetchField();

      // Parse YML
      $parser = new Symfony\Component\Yaml\Parser();
      try {
        $nodes[$nid]->ansible_variable_overrides = $parser->parse($nodes[$nid]->ansible_variables_raw);
      }
      catch (\Symfony\Component\Yaml\Exception\ParseException $e) {
        $nodes[$nid]->ansible_variable_overrides = array();
      }

      // If ansible_vars exist, override them with these.
      if (isset($nodes[$nid]->ansible_vars)) {
        $nodes[$nid]->ansible_vars_original = $nodes[$nid]->ansible_vars;

        if (is_array($nodes[$nid]->ansible_variable_overrides)) {
          $nodes[$nid]->ansible_vars = array_merge($nodes[$nid]->ansible_vars, $nodes[$nid]->ansible_variable_overrides);
        }
      }
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function ansible_variables_node_delete($node) {
  db_delete('ansible_variables')
    ->condition('nid', $node->nid)
    ->execute();
}

/**
 * Implements hook_revision_revision().
 */
function ansible_variables_node_revision_delete($node) {
  db_delete('ansible_variables')
    ->condition('vid', $node->vid)
    ->execute();
}

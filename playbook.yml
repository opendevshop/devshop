##
# DevShop: DevMaster Role.
#

---
- hosts: all
  user: root

  roles:
    - aegir

  vars_files:
    - vars.yml
    - vars.{{ ansible_os_family }}.yml

  tasks:

    - hostname: name={{ server_hostname }}

    - name: Setup | Message of the day.
      action: template src=templates/motd.j2 dest={{ motd_path }} mode=755

    # DEBIAN
    - name: Setup | DEBIAN | Install common packages.
      action: apt pkg={{ item }} state=installed update_cache=yes
      when: ansible_os_family == "Debian"
      with_items: packages

    - name: Setup | DEBIAN | Install NGINX server packages.
      action: apt pkg={{ item }} state=installed update_cache=yes
      when: ansible_os_family == "Debian" and server_webserver == "nginx"
      with_items: nginx_packages

    - name: Setup | DEBIAN | Install Apache server packages.
      action: apt pkg={{ item }} state=installed update_cache=yes
      when: ansible_os_family == "Debian" and server_webserver == "apache"
      with_items: apache_packages

    # REDHAT
    - name: Setup | REDHAT | Install common packages.
      action: yum name={{ item }} state=present
      when: ansible_os_family == "RedHat"
      with_items: packages

    - name: Setup | REDHAT | Install web server packages.
      action: yum name={{ item }} state=present
      when: ansible_os_family == "RedHat" and server_webserver == "nginx"
      with_items: nginx_packages

    - name: Setup | REDHAT | Install web server packages.
      action: yum name={{ item }} state=present
      when: ansible_os_family == "RedHat" and server_webserver == "apache"
      with_items: apache_packages

    - name: Add aegir to apache group.
      when: server_webserver == "apache"
      user:
        name=aegir
        groups={{ apache_user }}
        append=yes

    - name: Add aegir to nginx group.
      when: server_webserver == "nginx"
      user:
        name=aegir
        groups={{ nginx_user }}
        append=yes

    - name: Setup | Install Composer
      shell: curl -sS https://getcomposer.org/installer | php;  mv composer.phar /usr/local/bin/composer
      args:
        creates: /usr/local/bin/composer

    - name: Setup | Prepare composer directory
      file:
        path=/usr/share/composer
        state=directory

    - name: Setup | Install Drush
      shell: /usr/local/bin/composer global require drush/drush:{{ drush_version }} -d /usr/share/composer; /usr/share/composer/vendor/bin/drush

    - name: Setup | Add composer bin to path
      command: sed -i '1i export PATH="/usr/share/composer/vendor/bin:$PATH"' {{ bashrc_path }}

    - name: Make drush available globally.
      file:
        src=/usr/share/composer/vendor/bin/drush
        dest={{ drush_path }}
        state=link
        force=yes

    - name: Make devshop CLI available globally.
      file:
        src={{ playbook_path }}/bin/devshop
        dest={{ devshop_cli_path }}
        state=link
        force=yes

    # DEBIAN only.  RedHat has rewrite enabled by default.
    - name: Enable mod rewrite
      command: a2enmod rewrite
      when: ansible_os_family == "Debian" and server_webserver == "apache"

    - name: Enable mod ssl
      command: a2enmod ssl
      when: ansible_os_family == "Debian" and server_webserver == "apache"

    # Apache Symlink for 14.04 and higher.
    - name: Symbolic link to Aegir's Apache Config
      when: server_webserver == "apache" and (ansible_distribution != "Ubuntu" or ansible_lsb.major_release|int >= 14)
      file:
        src=/var/aegir/config/apache.conf
        dest={{ apache_confd_path }}
        state=link
        force=yes
      notify:
        - restart apache

    - name: Symbolic link to Aegir's Apache Config (When ubuntu < 14.04)
      when: server_webserver == "apache" and ansible_os_family == "Debian" and ansible_lsb.major_release|int < 14
      file:
        src=/var/aegir/config/apache.conf
        dest=/etc/apache2/conf.d/aegir.conf
        state=link
        force=yes
      notify:
        - restart apache

    # Nginx Symlink for 14.04 and higher.
    - name: Symbolic link to Aegir's Nginx Config
      when: server_webserver == "nginx" and (ansible_distribution != "Ubuntu" or ansible_lsb.major_release|int >= 14)
      file:
        src=/var/aegir/config/nginx.conf
        dest={{ nginx_confd_path }}
        state=link
        force=yes
      notify:
        - restart nginx


    - name: Symbolic link to Aegir's Nginx Config (When ubuntu < 14.04)
      when: server_webserver == "nginx" and (ansible_os_family == "Debian" and ansible_lsb.major_release|int < 14)
      file:
        src=/var/aegir/config/nginx.conf
        dest=/etc/nginx/sites-enabled/aegir.conf
        state=link
        force=yes
      notify:
        - restart nginx

    - name: Write www.conf file. # @TODO: Restart apache if changed.
      when: server_webserver == "nginx"
      template:
        src=templates/www.conf.j2
        dest={{ nginx_www_pool_path }}
        mode=0644

    - name: Write php.ini file. # @TODO: Restart apache if changed.
      when: server_webserver == "apache"
      template:
        src=templates/php.ini.j2
        dest={{ apache_php_ini_path }}
        mode=0644

    - name: Write php.ini file. # @TODO: Restart apache if changed.
      when: server_webserver == "nginx"
      template:
        src=templates/php.ini.j2
        dest={{ nginx_php_ini_path }}
        mode=0644

    - name: Write my.cnf file.
      template:
        src=templates/my.cnf.{{ ansible_os_family }}.j2
        dest={{ mysql_cnf_path }}
        mode=0644

    - name: Ensure MySQL is started and enabled on boot.
      service:
        name={{ mysql_daemon }}
        state=started
        enabled=yes

    - name: Check for secured installation of MySQL
      stat: path=/var/mysql-secured
      register: mysqlsecured

    - name: Install MySQL Securely
      include: ./tasks/mysql-secure.yml
      when: not mysqlsecured.stat.exists

    - name: Add aegir to sudoers for restarting apache.
      template:
        src=templates/sudoers-d-aegir.j2
        dest=/etc/sudoers.d/aegir
        mode=0440

    - name: Create /var/aegir/.drush
      file:
        path=/var/aegir/.drush
        owner=aegir group=aegir mode=0744
        state=directory

    - name: Install devshop_provision from github.
      git:
        repo: "{{ devshop_provision_repo }}"
        dest: /var/aegir/.drush/commands/devshop_provision
        version: "{{ devshop_version }}"
        force: yes
        update: yes

    - name: Make sure devshop_provision is owned by aegir
      file:
        path: /var/aegir/.drush/commands/devshop_provision
        owner: aegir
        group: aegir
        recurse: yes

    - name: Install required drush packages.
      command: "{{ drush_path }} dl {{ item.key }}-{{ item.value }} --destination=/var/aegir/.drush/commands --package-handler={{ drush_dl_method }} -y"
      with_dict: "{{ devshop_drush_packages }}"

    - name: Clear the drush cache.
      command: "{{ drush_path }} cc drush"
      become: yes
      become_user: aegir

    # Runs the drush devshop-install command with all of our options:
    - debug: msg="$ {{ drush_path }} devshop-install {{ server_hostname }} --version={{ devshop_version }} --aegir_db_pass={{ mysql_root_password }} --aegir_db_user=root --makefile={{ devshop_makefile }} --profile=devmaster --aegir_host={{ server_hostname }}  {{ devshop_working_copy }} --http_service_type={{ server_webserver }} -y"

    - name: Install Devmaster
      become: yes
      become_user: aegir
      command: "{{ drush_path }} devshop-install {{ server_hostname }} --version={{ devshop_version }} --aegir_db_pass={{ mysql_root_password }} --aegir_db_user=root --makefile={{ devshop_makefile }} --profile=devmaster --aegir_host={{ server_hostname }}  {{ devshop_working_copy }} --http_service_type={{ server_webserver }} -y"
      args:
        creates: /var/aegir/.drush/hostmaster.alias.drushrc.php

    - name: Supervisor | Set up queue runner script
      template:
        src=templates/hosting-queue-runner.j2
        dest=/usr/bin/hosting-queue-runner
        mode=0700
        owner=aegir
        group=aegir

    - name: Supervisor | Set up supervisor job
      template:
        src=templates/supervisor-hosting-queue-runner.conf.j2
        dest={{ supervisor_hosting_queued_conf_path }}
        mode=0644
      notify:
        - restart supervisor

    - name: Service | Ensure Supervisor is restarted
      service:
        name={{ supervisor_daemon }}
        state=restarted
        sleep=5
        enabled=yes

    - name: Service | Ensure Apache is restarted
      when: server_webserver == "apache"
      service:
        name={{ apache_daemon }}
        state=restarted

    - name: Service | Ensure Nginx is restarted
      when: server_webserver == "nginx"
      service:
        name={{ nginx_daemon }}
        state=restarted

    - name: Save SSH key as variable
      shell: "{{ drush_path }} @hostmaster vset devshop_public_key \"$(cat ~/.ssh/id_rsa.pub)\" --yes"
      become: yes
      become_user: aegir

    - name: Ensure privacy of SSH Keys
      file: path=/var/aegir/{{ item.path }} mode={{ item.mode }}
      with_items:
        - { path: '.ssh', mode: '0700' }
        - { path: '.ssh/id_rsa', mode: '600' }
        - { path: '.ssh/id_rsa.pub', mode: '644' }

    - name: Set git user name and email
      shell: "git config --global user.email aegir@{{ server_hostname }}"
      become: yes
      become_user: aegir

    - name: Set git user name and email
      shell: "git config --global user.name DevShop"
      become: yes
      become_user: aegir

    - name: Set git user name and email
      shell: "git config --global push.default simple"
      become: yes
      become_user: aegir

  handlers:
    - name: restart supervisor
      service:
        name={{ supervisor_daemon }}
        state=restarted
        sleep=3

    - name: restart mysql
      service: >
        name={{ mysql_daemon }}
        state=restarted

    - name: restart apache
      service:
        name={{ apache_daemon }}
        state=restarted

    - name: restart nginx
      service:
        name={{ nginx_daemon }}
        state=restarted

---
- name: "opendevshop.devmaster"
  debug:
    msg:
      - "Welcome the opendevshop.devmaster playbook! We are about to install: "
      - "  Repo: {{ devshop_cli_repo }}"
      - "  Path: {{ devshop_cli_path }}"
      - "  Version: {{ devshop_version }}"
      - "  CLI Version: {{ devshop_cli_version }}"
  tags: [always]

- name: Detect current server hostname.
  command: "hostname --fqdn"
  register: _server_hostname_fqdn_command
  failed_when: "_server_hostname_fqdn_command.stdout is undefined"
  become: false
  tags: [always]

- name: Set server_hostname variable from current server hostname.
  set_fact:
    server_hostname: "{{ _server_hostname_fqdn_command.stdout }}"
  when: server_hostname is not defined
  tags: [always]

- name: Display server_hostname.
  debug:
    msg: "{{ server_hostname }}"
  tags: [always]

- name: Set Server Hostname
  hostname:
    name: "{{ server_hostname }}"
  when: server_hostname | length > 0
  ignore_errors: "{{ server_hostname_ignore_errors }}"
  tags: [runtime]

# This is done so the roles will be visible when ansible config is the default.
# There are too many ways to configure the roles path. If we just put the files
# here, the DEFAULT_ROLES_PATH value will find devshop roles.
- name: Create Ansible Share folder
  file:
    path: "{{ ansible_share_path }}"
    state: directory

- name: Include version specific variables for Debian OS Family
  include_vars: "vars.{{ ansible_os_family }}.yml"
  when: ansible_os_family == "Debian"

- name: Include version specific variables for RedHat OS Family
  include_vars: "vars.{{ ansible_os_family }}{{ ansible_distribution_major_version }}.yml"
  when: ansible_os_family == "RedHat"

- name: Include OS-specific variables.
  include_vars: "vars.{{ ansible_os_family }}.yml"
  when: ansible_os_family == "Debian"

- name: Install extra packages
  apt:
    pkg: '{{ extra_packages }}'
    state: present
    update_cache: true
  when: ansible_os_family == "Debian"

- name: Install extra packages
  yum:
    name: '{{ extra_packages }}'
    state: present
  when: ansible_os_family == "RedHat"

- name: Install pip packages
  pip:
    name: '{{ devshop_pip_packages }}'
    state: present

- name: Detect currently installed version of DevShop.
  command: "{{ devshop_cli_path }}/scripts/branch-or-tag"
  register: __devshop_version_installed
  changed_when: true
  ignore_errors: true
  args:
    chdir: "{{ devshop_cli_path }}"

- name: "Detect if desired version {{ devshop_version }} is an ancestor of the installed version {{ __devshop_version_installed.stdout }}"
  command: "git merge-base --is-ancestor {{ __devshop_version_installed.stdout | quote }} {{ devshop_version | quote }}"
  register: __devshop_is_version_ancestor
  changed_when: true
  ignore_errors: true
  args:
    chdir: "{{ devshop_cli_path }}"
  when:
    - not __devshop_version_installed.failed

- name: "Stopping Upgrade: Specified devshop_version is not a descendant of {{ __devshop_version_installed.stdout }}"
  set_fact:
    devshop_cli_skip_update: true
    devmaster_skip_upgrade: true
  when:
    # Only run when devshop is already installed and the ancestor check failed.
    - not __devshop_version_installed.failed
    - __devshop_is_version_ancestor is defined
    - __devshop_is_version_ancestor.failed

- name: "Setting Variables for existing DevShop install (Version {{ __devshop_version_installed.stdout }})"
  set_fact:
    devshop_cli_upgrade_or_install: "Upgrade"
    devshop_version_installed: "{{ __devshop_version_installed.stdout }}"
  when:
    - not __devshop_version_installed.failed

- name: "Setting Variables for new DevShop install (Version {{ devshop_version }})"
  set_fact:
    devshop_cli_upgrade_or_install: "Install"
    devshop_version_installed: false
  when:
    - __devshop_version_installed.failed

- name: "Install DevShop Source"
  git:
    repo: "{{ devshop_cli_repo }}"
    version: "{{ devshop_cli_version }}"
    update: "{{ not devshop_cli_skip_update }}"
    dest: "{{ devshop_cli_path }}"
    force: "{{ not devshop_cli_skip_update }}"
  when: not devshop_cli_skip_update

- name: "Configure Composer Globally"
  command: "{{ php_executable }} {{ composer_path }} {{ devshop_cli_composer_install_command }}"
  # Changed: true is so we don't fail ansible lint.
  changed_when: true
  tags: [always]
  args:
    chdir: "{{ item }}"
  with_items:
    - "{{ devshop_cli_path }}"

- name: "Install DevShop dependencies with composer"
  command: "{{ php_executable }} {{ composer_path }} {{ devshop_cli_composer_install_command }}"
  # Changed: true is so we don't fail ansible lint.
  changed_when: true
  tags: [always]
  args:
    chdir: "{{ item }}"
  with_items:
    - "{{ devshop_cli_path }}"

- name: Ensure DevShop Control code is owned by aegir user.
  file:
    state: directory
    path: "{{ item }}"
    group: "{{ aegir_user_name }}"
    owner: "{{ aegir_user_name }}"
    recurse: true
  when: devshop_control_git_root is match(devshop_cli_path)
  tags: [always]
  with_items:
    - "{{ devshop_control_git_root }}"
    - "{{ devshop_cli_path }}/devmaster"

- name: Add DevShop bin directory to Path
  copy:
    dest: /etc/profile.d/devshop-cli-path.sh
    content: 'PATH=$PATH:{{ devshop_cli_path }}/bin'
  tags: [always]
  args:
    mode: 0644

- name: Add DevShop bin via symlink so path does not matter.
  file:
    src: "{{ devshop_cli_path }}/bin/devshop"
    dest: "{{ local_bin_path }}/devshop"
    state: link
    force: true
  tags: [always]

- name: Debug environment
  command: "env"
  become: true
  become_user: "{{ aegir_user_name }}"
  become_method: "{{ ansible_become_method_aegir }}"
  changed_when: true

- name: Create Global Drush Configuration Folder
  tags: [always]
  file:
    path: "/etc/drush"
    mode: 0755
    state: directory

- name: Create Global Drush Configuration File
  tags: [always]
  template:
    src: drushrc.php.j2
    dest: "/etc/drush/drushrc.php"
    mode: 0655

- name: Check drush status
  command: "{{ drush_bin_path }} status"
  become: true
  become_user: "{{ aegir_user_name }}"
  become_method: "{{ ansible_become_method_aegir }}"
  changed_when: true

- name: Ensure /var/aegir is owned by aegir user.
  file:
    state: directory
    path: "{{ aegir_user_home }}"
    group: "{{ aegir_user_name }}"
    owner: "{{ aegir_user_name }}"
  tags: [runtime]

- name: Ensure DevShop Control code is owned by aegir user.
  file:
    state: directory
    path: "{{ item }}"
    group: "{{ aegir_user_name }}"
    owner: "{{ aegir_user_name }}"
    recurse: true
  when: devshop_control_git_root is match(devshop_cli_path)
  tags: [runtime]
  with_items:
    - "{{ devshop_control_git_root }}"
    - "{{ devshop_cli_path }}/devmaster"

- name: Create /var/aegir/.drush
  file:
    path: "{{ aegir_user_home }}/.drush/commands"
    owner: "{{ aegir_user_name }}"
    group: "{{ aegir_user_name }}"
    mode: 0744
    state: directory
  tags: [runtime]

- name: Install required drush packages.
  command: |
    {{ drush_bin_path }} dl {{ item.key }}-{{ item.value }} --destination={{ aegir_user_home }}/.drush/commands --package-handler={{ drush_dl_method }}
  with_dict: "{{ devshop_drush_packages }}"
  changed_when: true
  ignore_errors: true
  become: true
  become_user: "{{ aegir_user_name }}"
  become_method: "{{ ansible_become_method_aegir }}"
  tags: [runtime]

- name: Setup Drush Bash Enhancements
  command: "{{ drush_bin_path }} init --yes"
  changed_when: true
  become: true
  become_user: "{{ aegir_user_name }}"
  become_method: "{{ ansible_become_method_aegir }}"
  tags: [runtime]

- name: "Remove existing DevShop Control Source Code from {{ devshop_control_git_root }} before installing, if requested."
  when: devshop_danger_remove_devmaster
  file:
    path: "{{ devshop_control_git_root }}"
    state: absent
  tags: [never, remove-devmaster, rebuild-devmaster]

- name: Clear the drush cache.
  command: "{{ drush_bin_path }} cc drush"
  changed_when: true
  become: true
  become_user: "{{ aegir_user_name }}"
  become_method: "{{ ansible_become_method_aegir }}"
  tags: [runtime]

- name: "Install DevShop Web Interface"
  include_tasks: "install-devmaster.yml"
  tags: [runtime]
  when: not devmaster_skip_install|bool

- name: Configure DevShop Web Interface
  tags: [runtime]
  include_tasks: "config-devmaster.yml"
  when: not devmaster_skip_install|bool

- name: Ensure privacy of SSH Keys
  file: path=/var/aegir/{{ item.path }} mode={{ item.mode }}
  with_items:
    - {path: '.ssh', mode: '0700'}
    - {path: '.ssh/id_rsa', mode: '600'}
    - {path: '.ssh/id_rsa.pub', mode: '644'}

- name: Create aegir's logs files
  file:
    path: "{{ item }}"
    owner: "{{ aegir_user_name }}"
    group: "{{ aegir_user_name }}"
    state: touch
    mode: 0755
  with_items: "{{ aegir_log_files_touch }}"

- name: Confirm PHP version {{ php_version }} is installed
  shell: php -v | grep -F '{{ php_version }}'
  changed_when: false

# CentOS started failing tests because the PHP CLI was throwing Warnings about date.timezone missing.
# @TODO: Investigate php.ini for CLI on all OS
# - name: 'RedHat: Set timezone in PHP.ini for CLI.'
#  lineinfile:
#    dest: '{{ php_cli_ini_path }}'
#    line: 'date.timezone = America/Chicago'
#  when: ansible_os_family == "RedHat"

- name: "opendevshop.devmaster"
  debug:
    msg:
      - "Ansible Playbook run complete!"
      - "  Repo: {{ devshop_cli_repo }}"
      - "  Path: {{ devshop_cli_path }}"
      - "  Version: {{ devshop_version }}"
      - "  CLI Version: {{ devshop_cli_version }}"
  tags: [always]

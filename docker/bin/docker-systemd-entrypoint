#!/usr/bin/env bash
set -e
#
# This script performs some magic to allow Docker container "Commands" to be run
# as a process other than 1 so that SystemD can be running in the background.
#
# Currently, if CMD runs successfully, the container stays running with SystemD.
# If CMD fails, it triggers the "shutdown" command to exit the container.
#
# The DOCKER_COMMAND is the actual Docker CMD used for this container image.
# $@ is every argument and option passed to the entrypoint (which is the same way CMD/ENTRPOINT work)
DOCKER_COMMAND=${@}
DOCKER_COMMAND_POST=${DOCKER_COMMAND_POST:-"echo 'No DOCKER_COMMAND_POST variable set. Which should never happen, because it is in the Dockerfile. Probably means you are running this outside of a container.'"}
SYSTEM_STATUS_COMMAND=${SYSTEM_STATUS_COMMAND:-systemctl status --no-pager}
WELCOME_MESSAGE="Enjoy the DevShop Containers!"

DEVSHOP_PATH="$( cd "$(dirname "$0")"/.. ; pwd -P )"
PATH="$DEVSHOP_PATH/bin:$DEVSHOP_PATH/scripts:$PATH"
export PATH

devshop_logo() {
  echo '
    ____              ____  _
   |  _ \  _____   __/ ___|| |__   ___  _ __
   | | | |/ _ \ \ / /\___ \|  _ \ / _ \|  _ \
   | |_| |  __/\ V /  ___) | | | | (_) | |_) |
   |____/ \___| \_/  |____/|_| |_|\___/| .__/
            http://getdevshop.com      |_|'
  if [ -z "$1" ]; then exit; fi

  devshop_line
  echo " $1 "
  devshop_line
}

devshop_line() {
  CHARACTER="${1:--}"
  COLUMNS="$2"
  printf '%*s\n' "${COLUMNS:-$(tput cols -T xterm)}" '' | tr ' ' $CHARACTER
}

devshop_logo "Starting /docker/bin/docker-systemd-entrypoint..."

echo "Hi! I'm docker-systemd-entrypoint."
echo "In a few seconds, I'm going to launch the Docker Command you specified as a new process."
echo "Then, I'm going to pass my process off to SystemD!"
echo "That way, you can specify any docker CMD but it will run inside a container with SystemD running properly."

devshop_line
echo "Environment Variables"

echo "INIT_COMMAND: $INIT_COMMAND"
echo "DOCKER_COMMAND: $DOCKER_COMMAND"
echo "DEVSHOP_DOCKER_COMMAND_RUN: $DEVSHOP_DOCKER_COMMAND_RUN"
echo "DOCKER_COMMAND_POST: $DOCKER_COMMAND_POST"
echo "SYSTEM_STATUS_COMMAND: $SYSTEM_STATUS_COMMAND"
echo "PATH: $PATH"

devshop_line
echo "Starting command chain..."

if [ ! -z "$DOCKER_COMMAND" ]; then
    # This launches a group of commands in a new process:
    #  Sleep for 3 seconds, to allow INIT_COMMAND to launch.
    #  Run $DOCKER_COMMAND, and exit with it's exit code.
    (( \
      sleep ${INIT_COMMAND_WAIT:-3} && \
      echo "System Status before running DOCKER_COMMAND: " && $SYSTEM_STATUS_COMMAND &&
      echo "Running Docker Command '$DOCKER_COMMAND' ..." && $DOCKER_COMMAND &&
        # If not successful, kill the container.
        # If successful, run DEVSHOP_DOCKER_COMMAND_RUN and mention that system D continues.
        echo "The DOCKER_COMMAND completed. (exit 0) Continuing on to DEVSHOP_DOCKER_COMMAND_RUN...." && \
        echo "System Status after running DOCKER_COMMAND: " && $SYSTEM_STATUS_COMMAND && \
        (
          echo "Running DEVSHOP_DOCKER_COMMAND_RUN Command '$DEVSHOP_DOCKER_COMMAND_RUN' ..." && $DEVSHOP_DOCKER_COMMAND_RUN &&
          echo "The DEVSHOP_DOCKER_COMMAND_RUN completed. (exit 0) Continuing on to DOCKER_COMMAND_POST..."  && \
            (
              echo "Running DOCKER_COMMAND_POST Command '$DOCKER_COMMAND_POST' ..." && $DOCKER_COMMAND_POST &&
              echo "The DOCKER_COMMAND_POST completed. (exit 0). The INIT_COMMAND continues on." ||
              if [ -n "$DOCKER_COMMAND_RUN_POST_EXIT" ]; then
                echo "The DOCKER_COMMAND_POST failed, and DOCKER_COMMAND_RUN_POST_EXIT was set. (exit $?) Triggering a shutdown to end INIT_COMMAND ..."
                shutdown
              else
                echo "The DOCKER_COMMAND_POST failed. (exit $?) Continuing on. If you wish to exit on failure, set DOCKER_COMMAND_RUN_POST_EXIT=1"
              fi
            )
        ) || (
          echo "The DEVSHOP_DOCKER_COMMAND_RUN failed. (exit $?) Continuing on. If you wish to exit on failure, run the command as the docker 'command' instead."
        )

    ) || ( \
        echo "The DOCKER_COMMAND failed. (exit $?) Triggering a shutdown to end INIT_COMMAND ..." && \
            shutdown
    )) &
  DOCKER_COMMAND_PID=$!
  echo "The Docker Command is about to start with PID $DOCKER_COMMAND_PID ..."

else
  echo "There is no Docker command set. If you set one, it would run after INIT_COMMAND in a separate process."

  # Let INIT COMMAND run, then wait 3 seconds, then show some messages and check system status.
  ( \
     echo "Waiting 3 seconds for systemd to start..." &&
     sleep ${INIT_COMMAND_WAIT:-3} && \
     echo "System Status: " && $SYSTEM_STATUS_COMMAND && \
     echo $WELCOME_MESSAGE \
  ) &

fi

# @TODO: Detect an unprivileged container or missing cgroup volume and inform the user.

echo "Running $INIT_COMMAND ..."
exec "$INIT_COMMAND"

